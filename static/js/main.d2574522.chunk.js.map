{"version":3,"sources":["TomtomReactSearchbox.js","App.js","serviceWorker.js","index.js"],"names":["CustomClear","onClear","onClick","CustomResultItem","props","icon","xmlns","width","height","viewBox","d","fill","className","isSelected","Result","App","React","useState","resultsFetch","setResultsFetch","resultChoose","setResultChoose","resultSelect","setResultSelect","autofocus","placeholder","searchOptions","key","process","REACT_APP_TOMTOM_SEARCH_API_KEY","language","limit","typeahead","minNumbOfChars","data-line","onResultsFetch","results","console","log","onResultChoose","result","onResultSelect","components","Clear","categorySet","basename","path","component","TomtomReactSearchbox","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2PAGA,SAASA,EAAT,GAAmC,IAAZC,EAAW,EAAXA,QACnB,OAAO,yBAAKC,QAASD,GAAd,SAGT,SAASE,EAAiBC,GACxB,IAAMC,EAAO,yBAAKC,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,QAAQ,aAAY,0BAAMC,EAAE,gBAAgBC,KAAK,SAAQ,0BAAMD,EAAE,uQAC7I,OACE,yBACEE,UAAS,oBAAeR,EAAMS,WAAa,YAAc,KACzD,yBAAKD,UAAU,QAAQP,GACvB,kBAAC,aAAWS,OAAWV,IAKhB,SAASW,IAAO,IAAD,EACcC,IAAMC,SAAS,GAD7B,mBACnBC,EADmB,KACLC,EADK,OAEcH,IAAMC,SAAS,GAF7B,mBAEnBG,EAFmB,KAELC,EAFK,OAGcL,IAAMC,SAAS,GAH7B,mBAGnBK,EAHmB,KAGLC,EAHK,KAK1B,OACE,oCACA,yBAAKX,UAAU,UACb,yBAAKA,UAAU,WACb,sDADF,yDAGE,yBAAKA,UAAU,kBACb,kBAAC,YAAD,CACEY,WAAW,EACXC,YAAY,wBACZC,cAAe,CACbC,IAAKC,+CAAYC,gCACjBC,SAAU,QACVC,MAAO,EACPC,WAAW,QAKnB,yBAAKpB,UAAU,WACb,yBAAKA,UAAU,cACb,4CAEA,6BAAK,0BAAMA,UAAU,aAAhB,yCAKP,yBAAKA,UAAU,cACb,2CAEV,6BAAK,0BAAMA,UAAU,gBAAhB,wMAaG,yBAAKA,UAAU,cACb,wCAEA,mDAHF,sEAKE,yBAAKA,UAAU,kBACf,kBAAC,YAAD,CACEqB,eAAgB,EAChBR,YAAY,2CACZC,cAAe,CACbC,IAAKC,+CAAYC,gCACjBC,SAAU,QACVC,MAAO,EACPC,WAAW,MAIf,yBAAKE,YAAU,KAAI,0BAAMtB,UAAU,gBAAhB,mPAcrB,yBAAKA,UAAU,cACb,mDADF,mCAEkC,gDAFlC,mEAE6H,gDAF7H,gDAEqM,gDAFrM,gFAGE,6BACE,4BACE,4DAAkCM,GAClC,4DAAkCE,GAClC,4DAAkCE,KAGtC,yBAAKV,UAAU,kBACb,kBAAC,YAAD,CACEuB,eAAgB,SAACC,GAAcjB,EAAgBD,EAAe,GAAImB,QAAQC,IAAIF,IAC9EG,eAAgB,SAACC,GAAanB,EAAgBD,EAAe,GAAIiB,QAAQC,IAAIE,IAC7EC,eAAgB,SAACD,GAAajB,EAAgBD,EAAe,GAAIe,QAAQC,IAAIE,IAC7Ef,YAAY,sCACZC,cAAe,CACbC,IAAKC,+CAAYC,gCACjBC,SAAU,QACVC,MAAO,EACPC,WAAW,MAGjB,yBAAKE,YAAU,SAAQ,0BAAMtB,UAAU,gBAAhB,0XAgBzB,yBAAKA,UAAU,cACb,8CADF,yGAKE,yBAAKA,UAAU,kBAEf,kBAAC,YAAD,CACEa,YAAY,0BACZiB,WAAY,CACVC,MAAO3C,EACPc,OAAQX,GAEVuB,cAAe,CACbC,IAAKC,+CAAYC,gCACjBC,SAAU,QACVC,MAAO,EACPa,YAAa,OACbZ,WAAW,MAIf,yBAAKE,YAAU,eAAc,0BAAMtB,UAAU,gBAAhB,opC,mBCzI1BG,MAVf,WACE,OACE,kBAAC,IAAD,CAAQ8B,SAAS,KACf,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,0BAA0BC,UAAWC,OCJvCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d2574522.chunk.js","sourcesContent":["import React from 'react';\nimport { SearchBox as TomtomReactSearchbox, components } from 'tomtom-react-searchbox';\n\nfunction CustomClear({ onClear }) {\n    return <div onClick={onClear}>Clear</div>;\n  }\n\n  function CustomResultItem(props) {\n    const icon = <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M8.1 13.34l2.83-2.83L3.91 3.5c-1.56 1.56-1.56 4.09 0 5.66l4.19 4.18zm6.78-1.81c1.53.71 3.68.21 5.27-1.38 1.91-1.91 2.28-4.65.81-6.12-1.46-1.46-4.2-1.1-6.12.81-1.59 1.59-2.09 3.74-1.38 5.27L3.7 19.87l1.41 1.41L12 14.41l6.88 6.88 1.41-1.41L13.41 13l1.47-1.47z\"/></svg>;\n    return (\n      <div\n        className={`my-result ${props.isSelected ? '-selected' : ''}`}>\n        <div className=\"icon\">{icon}</div>\n        <components.Result {...props} />\n      </div>\n    );\n  }\n\nexport default function App() {\n    const [resultsFetch, setResultsFetch] = React.useState(0);\n    const [resultChoose, setResultChoose] = React.useState(0);\n    const [resultSelect, setResultSelect] = React.useState(0);\n\n    return (\n      <>\n      <div className=\"header\">\n        <div className=\"section\">\n          <h1>Tomtom React Searchbox</h1>\n          Lightweight & easily customizable searchbox component.\n          <div className=\"select-wrapper\">\n            <TomtomReactSearchbox\n              autofocus={true}\n              placeholder=\"Search for an address\"\n              searchOptions={{\n                key: process.env.REACT_APP_TOMTOM_SEARCH_API_KEY,\n                language: 'en-Gb',\n                limit: 5,\n                typeahead: true\n              }} />\n            </div>\n          </div>\n        </div>\n        <div className=\"section\">\n          <div className=\"subsection\">\n            <h2>Installation</h2>\n\n            <pre><code className=\"language-\">\n  npm i --save tomtom-react-searchbox\n  </code></pre>\n\n          </div>\n          <div className=\"subsection\">\n            <h2>Basic usage</h2>\n\n  <pre><code className=\"language-jsx\">\n  {`<TomtomReactSearchbox\n    placeholder=\"Search for an address\"\n    searchOptions={{\n      key: 'your-api-key',\n      language: 'en-Gb',\n      limit: 5,\n      typeahead: true\n    }}\n  />`}\n    </code></pre>\n\n          </div>\n          <div className=\"subsection\">\n            <h2>Features</h2>\n\n            <h3>Customize behaviour</h3>\n            Control when call is triggered by specifying \"minNumbOfChars\" prop.\n            <div className=\"select-wrapper\">\n            <TomtomReactSearchbox\n              minNumbOfChars={5}\n              placeholder=\"Typing 5 characters will trigger request\"\n              searchOptions={{\n                key: process.env.REACT_APP_TOMTOM_SEARCH_API_KEY,\n                language: 'en-Gb',\n                limit: 5,\n                typeahead: true\n              }} />\n            </div>\n\n            <pre data-line=\"2\"><code className=\"language-jsx\" >\n  {`<TomtomReactSearchbox\n    minNumbOfChars={5}\n    placeholder=\"Typing 5 characters will trigger request\"\n    searchOptions={{\n      key: 'your-api-key',\n      language: 'en-Gb',\n      limit: 5,\n      typeahead: true\n    }}\n  />`}\n    </code></pre>\n          </div>\n\n          <div className=\"subsection\">\n            <h3>React to the events</h3>\n            There are 3 callbacks provided: <code>onResultsFetch</code> - called every time search results are retrieved from the api, <code>onResultSelect</code> - called when search result is clicked, and <code>onResultSelect</code> - called when result is selected by using arrow keys. Check it out yourself:\n            <div>\n              <ul>\n                <li>onResultsFetch called times: {resultsFetch}</li>\n                <li>onResultChoose called times: {resultChoose}</li>\n                <li>onResultSelect called times: {resultSelect}</li>\n              </ul>\n            </div>\n            <div className=\"select-wrapper\">\n              <TomtomReactSearchbox\n                onResultsFetch={(results) => { setResultsFetch(resultsFetch + 1); console.log(results); }}\n                onResultChoose={(result) => { setResultChoose(resultChoose + 1); console.log(result); }}\n                onResultSelect={(result) => { setResultSelect(resultSelect + 1); console.log(result); }}\n                placeholder=\"Play around to see triggered events\"\n                searchOptions={{\n                  key: process.env.REACT_APP_TOMTOM_SEARCH_API_KEY,\n                  language: 'en-Gb',\n                  limit: 5,\n                  typeahead: true\n                }} />\n            </div>\n            <pre data-line=\"2,3,4\"><code className=\"language-jsx\" >\n  {`<TomtomReactSearchbox\n    onResultsFetch={(results) => console.log(results)}\n    onResultChoose={(result) => console.log(result)}\n    onResultSelect={(result) => console.log(result)}\n    placeholder=\"Play around to see triggered events\"\n    searchOptions={{\n      key: 'your-api-key',\n      language: 'en-Gb',\n      limit: 5,\n      typeahead: true\n    }}\n  />`}\n    </code></pre>\n          </div>\n\n          <div className=\"subsection\">\n            <h2>Components API</h2>\n\n            Components API lets use completely replace searchbox's components or wrap default ones into your owns.\n\n            <div className=\"select-wrapper\">\n\n            <TomtomReactSearchbox\n              placeholder='Search for a restaurant'\n              components={{\n                Clear: CustomClear,\n                Result: CustomResultItem\n              }}\n              searchOptions={{\n                key: process.env.REACT_APP_TOMTOM_SEARCH_API_KEY,\n                language: 'en-Gb',\n                limit: 5,\n                categorySet: '7315',\n                typeahead: true\n              }} />\n            </div>\n\n            <pre data-line=\"23,24,25,26\"><code className=\"language-jsx\" >\n  {`import {\n    SearchBox as TomtomReactSearchbox,\n    components\n  } from 'tomtom-react-searchbox';\n\n  function CustomClear({ onClear }) {\n    return <div onClick={onClear}>Clear</div>;\n  }\n\n  function CustomResult(props) {\n    const icon = <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M8.1 13.34l2.83-2.83L3.91 3.5c-1.56 1.56-1.56 4.09 0 5.66l4.19 4.18zm6.78-1.81c1.53.71 3.68.21 5.27-1.38 1.91-1.91 2.28-4.65.81-6.12-1.46-1.46-4.2-1.1-6.12.81-1.59 1.59-2.09 3.74-1.38 5.27L3.7 19.87l1.41 1.41L12 14.41l6.88 6.88 1.41-1.41L13.41 13l1.47-1.47z\"/></svg>;\n    return (\n      <div\n        className={\\`my-result \\${props.isSelected ? '-selected' : ''}\\`}>\n        <div className=\"icon\">{icon}</div>\n        <components.Result {...props} />\n      </div>\n    );\n  }\n\n  <TomtomReactSearchbox\n  placeholder='Search for a restaurant'\n  components={{\n    Clear: CustomClear,\n    Result: CustomResult\n  }}\n  searchOptions={{\n    key: 'your-api-key',\n    language: 'en-Gb',\n    limit: 5,\n    typeahead: true,\n    categorySet: '7315'\n  }} />\n  </div>`}\n    </code></pre>\n          </div>\n\n      </div>\n      </>\n    );\n  }\n","import React from 'react';\nimport './App.scss';\n\nimport TomtomReactSearchbox from './TomtomReactSearchbox';\n\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\n\n\nfunction App() {\n  return (\n    <Router basename=\"/\">\n      <Switch>\n          <Route path=\"/tomtom-react-searchbox\" component={TomtomReactSearchbox} />\n      </Switch>\n    </Router>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}